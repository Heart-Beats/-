<application>
  <component name="AppStorage">
    <histories>
      <item value="AGPBI: {&quot;kind&quot;:&quot;error&quot;,&quot;text&quot;:&quot;error: resource drawable/leepi_carlife_065 (aka com.iauto.av:drawable/leepi_carlife_065) not found.&quot;,&quot;sources&quot;:[{&quot;file&quot;:&quot;/home/zhanglei/3T/home/zhanglei/zl_treble/ivi/packages/apps/av/app/src/main/res/layout/avscreen/layout/layout_carlife_confirm.xml&quot;,&quot;position&quot;:{&quot;startLine&quot;:4}}],&quot;original&quot;:&quot;&quot;,&quot;tool&quot;:&quot;AAPT&quot;}" />
      <item value="AGPBI: {&quot;kind&quot;:&quot;error&quot;,&quot;text&quot;:&quot;error: resource drawable/leepi_carlife_065 (aka com.iauto.av:drawable/leepi_carlife_065) not found.&quot;,&quot;sources&quot;:[{&quot;file&quot;:&quot;/home/zhanglei/3T/home/zhanglei/zl_treble/ivi/packages/apps/av/app/src/main/res/layout/avscreen/layout/layout_carlife_confirm.xml&quot;,&quot;position&quot;:{&quot;startLine&quot;:4}}],&quot;original&quot;:&quot;&quot;,&quot;tool&quot;:&quot;AAPT&quot;}&#10;:app:processDebugResources FAILED" />
      <item value="and the {@code parameterTypes} parameter is an array of * {@code Class} objects that identify the method's formal parameter * types, in declared order. If more than one method with the same * parameter types is declared in a class, and one of these methods has a * return type that is more specific than any of the others, that method is * returned; otherwise one of the methods is chosen arbitrarily." />
      <item value="Could not launch intent Intent { act=android.intent.action.MAIN flg=0x10000000 cmp=net.suntec.merbok.av/.MainActivity } within 45 seconds. Perhaps the main thread has not gone idle within a reasonable amount of time? There could be an animation or something constantly repainting the screen. Or the activity is doing network calls on creation? See the threaddump logs. For your reference the last time the event queue was idle before your activity launch request was 1262305013053 and now the last time the queue went idle was: 1262305020042. If these numbers are the same your activity might be hogging the event queue." />
      <item value="Unchecked call to 'getDeclaredMethod(String, Class&lt;?&gt;...)' as a member of raw type 'java.lang.Class' less... (Ctrl+F1) Signals places where an unchecked warning is issued by the compiler, for example:" />
      <item value="manual" />
      <item value="elapsed" />
      <item value="songelapsed" />
      <item value="//Information retrieving" />
      <item value="Information retrieving" />
      <item value="Returns the closest {@code int} to the argument, with ties * rounding to positive infinity." />
      <item value="Condition 'null == btAudioSongLength' is always 'false' less... (Ctrl+F1) This inspection analyzes method control and data flow to report possible conditions that are always true or false, expressions whose value is statically proven to be constant, and situations that can lead to nullability contract violations. Variables, method parameters and return values marked as @Nullable or @NotNull are treated as nullable (or not-null, respectively) and used during the analysis to check nullability contracts, e.g. report NullPointerException (NPE) errors that might be produced. More complex contracts can be defined using @Contract annotation, for example: @Contract(&quot;_, null -&gt; null&quot;) — method returns null if its second argument is null @Contract(&quot;_, null -&gt; null; _, !null -&gt; !null&quot;) — method returns null if its second argument is null and not-null otherwise @Contract(&quot;true -&gt; fail&quot;) — a typical assertFalse method which throws an exception if true is passed to it The inspection can be configured to use custom @Nullable @NotNull annotations (by default the ones from annotations.jar will be used)" />
      <item value="Condition 'null == btAudioSongLength' is always 'false' less... (Ctrl+F1) This inspection analyzes method control and data flow to report possible conditions that are always true or false, expressions whose value is statically proven to be constant, and situations that can lead to nullability contract violations.&#10;Variables, method parameters and return values marked as @Nullable or @NotNull are treated as nullable (or not-null, respectively) and used during the analysis to check nullability contracts, e.g. report NullPointerException (NPE) errors that might be produced.&#10;More complex contracts can be defined using @Contract annotation, for example:&#10;@Contract(&quot;_, null -&gt; null&quot;) — method returns null if its second argument is null @Contract(&quot;_, null -&gt; null; _, !null -&gt; !null&quot;) — method returns null if its second argument is null and not-null otherwise @Contract(&quot;true -&gt; fail&quot;) — a typical assertFalse method which throws an exception if true is passed to it The inspection can be configured to use custom @Nullable&#10;@NotNull annotations (by default the ones from annotations.jar will be used)" />
      <item value="BT FUNCTION BTAUDIO" />
      <item value="Content View" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="12" />
        <entry key="ENGLISH" value="13" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
      </map>
    </option>
  </component>
</application>